<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://dominikocsofszki.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dominikocsofszki.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-11-27T13:32:46+01:00</updated><id>https://dominikocsofszki.github.io/feed.xml</id><title type="html">Dominik Ocsofszki DRAFT2!</title><subtitle>Dominik Ocsfoszki 
</subtitle><entry><title type="html">CUSTOM</title><link href="https://dominikocsofszki.github.io/blog/2024/CUSTOMIZE/" rel="alternate" type="text/html" title="CUSTOM" /><published>2024-11-24T00:00:00+01:00</published><updated>2024-11-24T00:00:00+01:00</updated><id>https://dominikocsofszki.github.io/blog/2024/CUSTOMIZE</id><content type="html" xml:base="https://dominikocsofszki.github.io/blog/2024/CUSTOMIZE/"><![CDATA[<h1 id="customize">Customize</h1>

<p>Here we will give you some tips on how to customize the website. One important thing to note is that <strong>ALL</strong> the changes you make should be done on the <strong>main</strong> branch of your repository. The <code class="language-plaintext highlighter-rouge">gh-pages</code> branch is automatically overwritten every time you make a change to the main branch.</p>

<h2 id="project-structure">Project structure</h2>

<p>The project is structured as follows, focusing on the main components that you will need to modify:</p>

<pre><code class="language-txt">.
├── 📂 assets/: contains the assets that are displayed in the website
│   └── 📂 json/
    │   └── 📄 resume.json: CV in JSON format (https://jsonresume.org/)
├── 📂 _bibliography/
│   └── 📄 papers.bib: bibliography in BibTeX format
├── 📄 _config.yml: the configuration file of the template
├── 📂 _data/: contains some of the data used in the template
│   ├── 📄 cv.yml: CV in YAML format, used when assets/json/resume.json is not found
│   └── 📄 repositories.yml: users and repositories info in YAML format
├── 📂 _includes/: contains code parts that are included in the main HTML file
│   └── 📄 news.liquid: defines the news section layout in the about page
├── 📂 _layouts/: contains the layouts to choose from in the frontmatter of the Markdown files
├── 📂 _news/: the news that will appear in the news section in the about page
├── 📂 _pages/: contains the pages of the website
|   └── 📄 404.md: 404 page (page not found)
├── 📂 _posts/: contains the blog posts
├── 📂 _projects/: contains the projects
└── 📂 _sass/: contains the SASS files that define the style of the website
    ├── 📄 _base.scss: base style of the website
    ├── 📄 _cv.scss: style of the CV page
    ├── 📄 _distill.scss: style of the Distill articles
    ├── 📄 _layout.scss: style of the overall layout
    ├── 📄 _themes.scss: themes colors and a few icons
    └── 📄 _variables.scss: variables used in the SASS files
</code></pre>

<h2 id="configuration">Configuration</h2>

<p>The configuration file <a href="_config.yml">_config.yml</a> contains the main configuration of the website. Most of the settings is self-explanatory and we also tried to add as much comments as possible. If you have any questions, please check if it was not already answered in the <a href="FAQ.md">FAQ</a>.</p>

<blockquote>
  <p>Note that the <code class="language-plaintext highlighter-rouge">url</code> and <code class="language-plaintext highlighter-rouge">baseurl</code> settings are used to generate the links of the website, as explained in the <a href="INSTALL.md">install instructions</a>.</p>
</blockquote>

<p>All changes made to this file are only visible after you rebuild the website. That means that you need to run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> again if you are running the website locally or push your changes to GitHub if you are using GitHub Pages. All other changes are visible immediately, you only need to refresh the page.</p>

<h2 id="modifying-the-cv-information">Modifying the CV information</h2>

<p>There are currently 2 different ways of generating the CV page content. The first one is by using a json file located in <a href="assets/json/resume.json">assets/json/resume.json</a>. It is a <a href="https://jsonresume.org/">known standard</a> for creating a CV programmatically. The second one, currently used as a fallback when the json file is not found, is by using a yml file located in <a href="_data/cv.yml">_data/cv.yml</a>. This was the original way of creating the CV page content and since it is more human readable than a json file we decided to keep it as an option.</p>

<p>What this means is, if there is no resume data defined in <a href="_config.yml">_config.yml</a> and loaded via a json file, it will load the contents of <a href="_data/cv.yml">_data/cv.yml</a>. If you want to use the <a href="_data/cv.yml">_data/cv.yml</a> file as the source of your CV, you must delete the <a href="assets/json/resume.json">assets/json/resume.json</a> file.</p>

<h2 id="modifying-the-user-and-repository-information">Modifying the user and repository information</h2>

<p>The user and repository information is defined in <a href="_data/repositories.yml">_data/repositories.yml</a>. You can add as many users and repositories as you want. Both informations are used in the <code class="language-plaintext highlighter-rouge">repositories</code> section.</p>

<h2 id="creating-new-pages">Creating new pages</h2>

<p>You can create new pages by adding new Markdown files in the <a href="_pages/">_pages</a> directory. The easiest way to do this is to copy an existing page and modify it. You can choose the layout of the page by changing the <a href="https://jekyllrb.com/docs/layouts/">layout</a> attribute in the <a href="https://jekyllrb.com/docs/front-matter/">frontmatter</a> of the Markdown file, and also the path to access it by changing the <a href="https://jekyllrb.com/docs/permalinks/">permalink</a> attribute. You can also add new layouts in the <a href="_layouts/">_layouts</a> directory if you feel the need for it.</p>

<h2 id="creating-new-blog-posts">Creating new blog posts</h2>

<p>To create a new blog post, you can add a new Markdown file in the <a href="_posts/">_posts</a> directory. The <a href="https://jekyllrb.com/docs/posts/#creating-posts">name of the file must follow</a> the format <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code>. The easiest way to do this is to copy an existing blog post and modify it. Note that some blog posts have optional fields in the <a href="https://jekyllrb.com/docs/front-matter/">frontmatter</a> that are used to enable specific behaviors or functions.</p>

<p>If you want to create blog posts that are not ready to be published, but you want to track it with git, you can create a <a href="https://jekyllrb.com/docs/posts/#drafts">_drafts</a> directory and store them there.</p>

<h2 id="creating-new-projects">Creating new projects</h2>

<p>You can create new projects by adding new Markdown files in the <a href="_projects/">_projects</a> directory. The easiest way to do this is to copy an existing project and modify it.</p>

<h2 id="adding-some-news">Adding some news</h2>

<p>You can add news in the about page by adding new Markdown files in the <a href="_news/">_news</a> directory. There are currently two types of news: inline news and news with a link. News with a link take you to a new page while inline news are displayed directly in the about page. The easiest way to create yours is to copy an existing news and modify it.</p>

<h2 id="adding-collections">Adding Collections</h2>

<p>This Jekyll theme implements <code class="language-plaintext highlighter-rouge">collections</code> to let you break up your work into categories. The theme comes with two default collections: <code class="language-plaintext highlighter-rouge">news</code> and <code class="language-plaintext highlighter-rouge">projects</code>. Items from the <code class="language-plaintext highlighter-rouge">news</code> collection are automatically displayed on the home page. Items from the <code class="language-plaintext highlighter-rouge">projects</code> collection are displayed on a responsive grid on projects page.</p>

<p>You can easily create your own collections, apps, short stories, courses, or whatever your creative work is. To do this, edit the collections in the <a href="_config.yml">_config.yml</a> file, create a corresponding folder, and create a landing page for your collection, similar to <a href="_pages/projects.md">_pages/projects.md</a>.</p>

<h2 id="adding-a-new-publication">Adding a new publication</h2>

<p>To add publications create a new entry in the <a href="_bibliography/papers.bib">_bibliography/papers.bib</a> file. You can find the BibTeX entry of a publication in Google Scholar by clicking on the quotation marks below the publication title, then clicking on “BibTeX”, or also in the conference page itself. By default, the publications will be sorted by year and the most recent will be displayed first. You can change this behavior and more in the <code class="language-plaintext highlighter-rouge">Jekyll Scholar</code> section in <a href="_config.yml">_config.yml</a> file.</p>

<p>You can add extra information to a publication, like a PDF file in the <code class="language-plaintext highlighter-rouge">assets/pdfs/</code> directory and add the path to the PDF file in the BibTeX entry with the <code class="language-plaintext highlighter-rouge">pdf</code> field. Some of the supported fields are: <code class="language-plaintext highlighter-rouge">abstract</code>, <code class="language-plaintext highlighter-rouge">altmetric</code>, <code class="language-plaintext highlighter-rouge">annotation</code>, <code class="language-plaintext highlighter-rouge">arxiv</code>, <code class="language-plaintext highlighter-rouge">bibtex_show</code>, <code class="language-plaintext highlighter-rouge">blog</code>, <code class="language-plaintext highlighter-rouge">code</code>, <code class="language-plaintext highlighter-rouge">dimensions</code>, <code class="language-plaintext highlighter-rouge">doi</code>, <code class="language-plaintext highlighter-rouge">eprint</code>, <code class="language-plaintext highlighter-rouge">html</code>, <code class="language-plaintext highlighter-rouge">isbn</code>, <code class="language-plaintext highlighter-rouge">pdf</code>, <code class="language-plaintext highlighter-rouge">pmid</code>, <code class="language-plaintext highlighter-rouge">poster</code>, <code class="language-plaintext highlighter-rouge">slides</code>, <code class="language-plaintext highlighter-rouge">supp</code>, <code class="language-plaintext highlighter-rouge">video</code>, and <code class="language-plaintext highlighter-rouge">website</code>.</p>

<h3 id="author-annotation">Author annotation</h3>

<p>In publications, the author entry for yourself is identified by string array <code class="language-plaintext highlighter-rouge">scholar:last_name</code> and string array <code class="language-plaintext highlighter-rouge">scholar:first_name</code> in <a href="_config.yml">_config.yml</a>. For example, if you have the following entry in your <a href="_config.yml">_config.yml</a>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">scholar</span><span class="pi">:</span>
  <span class="na">last_name</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Einstein</span><span class="pi">]</span>
  <span class="na">first_name</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Albert</span><span class="pi">,</span> <span class="nv">A.</span><span class="pi">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If the entry matches one form of the last names and the first names, it will be underlined. Keep meta-information about your co-authors in <a href="_data/coauthors.yml">_data/coauthors.yml</a> and Jekyll will insert links to their webpages automatically. The co-author data format is as follows, with the last names lower cased and without accents as the key:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="s2">"</span><span class="s">adams"</span><span class="err">:</span>
  <span class="pi">-</span> <span class="na">firstname</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">Edwin"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">E."</span><span class="pi">,</span> <span class="s2">"</span><span class="s">E.</span><span class="nv"> </span><span class="s">P."</span><span class="pi">,</span> <span class="s2">"</span><span class="s">Edwin</span><span class="nv"> </span><span class="s">Plimpton"</span><span class="pi">]</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://en.wikipedia.org/wiki/Edwin_Plimpton_Adams</span>

<span class="s2">"</span><span class="s">podolsky"</span><span class="err">:</span>
  <span class="pi">-</span> <span class="na">firstname</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">Boris"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">B."</span><span class="pi">,</span> <span class="s2">"</span><span class="s">B.</span><span class="nv"> </span><span class="s">Y."</span><span class="pi">,</span> <span class="s2">"</span><span class="s">Boris</span><span class="nv"> </span><span class="s">Yakovlevich"</span><span class="pi">]</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://en.wikipedia.org/wiki/Boris_Podolsky</span>

<span class="s2">"</span><span class="s">rosen"</span><span class="err">:</span>
  <span class="pi">-</span> <span class="na">firstname</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">Nathan"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">N."</span><span class="pi">]</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://en.wikipedia.org/wiki/Nathan_Rosen</span>

<span class="s2">"</span><span class="s">bach"</span><span class="err">:</span>
  <span class="pi">-</span> <span class="na">firstname</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">Johann</span><span class="nv"> </span><span class="s">Sebastian"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">J.</span><span class="nv"> </span><span class="s">S."</span><span class="pi">]</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://en.wikipedia.org/wiki/Johann_Sebastian_Bach</span>

  <span class="pi">-</span> <span class="na">firstname</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">Carl</span><span class="nv"> </span><span class="s">Philipp</span><span class="nv"> </span><span class="s">Emanuel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">C.</span><span class="nv"> </span><span class="s">P.</span><span class="nv"> </span><span class="s">E."</span><span class="pi">]</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://en.wikipedia.org/wiki/Carl_Philipp_Emanuel_Bach</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If the entry matches one of the combinations of the last names and the first names, it will be highlighted and linked to the url provided. Note that the keys <strong>MUST BE</strong> lower cased and <strong>MUST NOT</strong> contain accents. This is because the keys are used to match the last names in the BibTeX entries, considering possible variations.</p>

<h3 id="buttons-through-custom-bibtex-keywords">Buttons (through custom bibtex keywords)</h3>

<p>There are several custom bibtex keywords that you can use to affect how the entries are displayed on the webpage:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">abbr</code>: Adds an abbreviation to the left of the entry. You can add links to these by creating a venue.yaml-file in the _data folder and adding entries that match.</li>
  <li><code class="language-plaintext highlighter-rouge">abstract</code>: Adds an “Abs” button that expands a hidden text field when clicked to show the abstract text</li>
  <li><code class="language-plaintext highlighter-rouge">altmetric</code>: Adds an <a href="https://www.altmetric.com/">Altmetric</a> badge (Note: if DOI is provided just use <code class="language-plaintext highlighter-rouge">true</code>, otherwise only add the altmetric identifier here - the link is generated automatically)</li>
  <li><code class="language-plaintext highlighter-rouge">annotation</code>: Adds a popover info message to the end of the author list that can potentially be used to clarify superscripts. HTML is allowed.</li>
  <li><code class="language-plaintext highlighter-rouge">arxiv</code>: Adds a link to the Arxiv website (Note: only add the arxiv identifier here - the link is generated automatically)</li>
  <li><code class="language-plaintext highlighter-rouge">bibtex_show</code>: Adds a “Bib” button that expands a hidden text field with the full bibliography entry</li>
  <li><code class="language-plaintext highlighter-rouge">blog</code>: Adds a “Blog” button redirecting to the specified link</li>
  <li><code class="language-plaintext highlighter-rouge">code</code>: Adds a “Code” button redirecting to the specified link</li>
  <li><code class="language-plaintext highlighter-rouge">dimensions</code>: Adds a <a href="https://www.dimensions.ai/">Dimensions</a> badge (Note: if DOI or PMID is provided just use <code class="language-plaintext highlighter-rouge">true</code>, otherwise only add the Dimensions’ identifier here - the link is generated automatically)</li>
  <li><code class="language-plaintext highlighter-rouge">html</code>: Inserts an “HTML” button redirecting to the user-specified link</li>
  <li><code class="language-plaintext highlighter-rouge">pdf</code>: Adds a “PDF” button redirecting to a specified file (if a full link is not specified, the file will be assumed to be placed in the /assets/pdf/ directory)</li>
  <li><code class="language-plaintext highlighter-rouge">poster</code>: Adds a “Poster” button redirecting to a specified file (if a full link is not specified, the file will be assumed to be placed in the /assets/pdf/ directory)</li>
  <li><code class="language-plaintext highlighter-rouge">slides</code>: Adds a “Slides” button redirecting to a specified file (if a full link is not specified, the file will be assumed to be placed in the /assets/pdf/ directory)</li>
  <li><code class="language-plaintext highlighter-rouge">supp</code>: Adds a “Supp” button to a specified file (if a full link is not specified, the file will be assumed to be placed in the /assets/pdf/ directory)</li>
  <li><code class="language-plaintext highlighter-rouge">website</code>: Adds a “Website” button redirecting to the specified link</li>
</ul>

<p>You can implement your own buttons by editing the <a href="_layouts/bib.liquid">_layouts/bib.liquid</a> file.</p>

<h2 id="changing-theme-color">Changing theme color</h2>

<p>A variety of beautiful theme colors have been selected for you to choose from. The default is purple, but you can quickly change it by editing the <code class="language-plaintext highlighter-rouge">--global-theme-color</code> variable in the <a href="_sass/_themes.scss">_sass/_themes.scss</a> file. Other color variables are listed there as well. The stock theme color options available can be found at <a href="_sass/_variables.scss">_sass/_variables.scss</a>. You can also add your own colors to this file assigning each a name for ease of use across the template.</p>

<h2 id="adding-social-media-information">Adding social media information</h2>

<p>You can add your social media links by adding the specified information at the <code class="language-plaintext highlighter-rouge">Social integration</code> section in the <a href="_config.yml">_config.yml</a> file. This information will appear at the bottom of the <code class="language-plaintext highlighter-rouge">About</code> page.</p>

<h2 id="adding-a-newsletter">Adding a newsletter</h2>

<p>You can add a newsletter subscription form by adding the specified information at the <code class="language-plaintext highlighter-rouge">newsletter</code> section in the <a href="_config.yml">_config.yml</a> file. To set up a newsletter, you can use a service like <a href="https://loops.so/">Loops.so</a>, which is the current supported solution. Once you have set up your newsletter, you can add the form <a href="https://loops.so/docs/forms/custom-form">endpoint</a> to the <code class="language-plaintext highlighter-rouge">endpoint</code> field in the <code class="language-plaintext highlighter-rouge">newsletter</code> section of the <a href="_config.yml">_config.yml</a> file.</p>

<p>Depending on your specified footer behavior, the sign up form either will appear at the bottom of the <code class="language-plaintext highlighter-rouge">About</code> page and at the bottom of blogposts if <code class="language-plaintext highlighter-rouge">related_posts</code> are enabled, or in the footer at the bottom of each page.</p>

<h2 id="adding-token-for-lighthouse-badger">Adding Token for Lighthouse Badger</h2>

<p>To add secrets for <a href="https://github.com/alshedivat/al-folio/actions/workflows/lighthouse-badger.yml">lighthouse-badger</a>, create a <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token">personal access token (PAT)</a> and add it as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#creating-encrypted-secrets-for-a-repository">secret</a> named <code class="language-plaintext highlighter-rouge">LIGHTHOUSE_BADGER_TOKEN</code> to your repository. The <a href="https://github.com/MyActionWay/lighthouse-badger-workflows#lighthouse-badger-easyyml">lighthouse-badger documentation</a> specifies using an environment variable, but using it as a secret is more secure and appropriate for a PAT.</p>

<p>Also In case you face the error: “Input required and not supplied: token” in the Lighthouse Badger action, this solution resolves it.</p>

<h3 id="personal-access-token-fine-grained-permissions-for-lighthouse-badger">Personal Access Token (fine-grained) Permissions for Lighthouse Badger:</h3>

<ul>
  <li><strong>contents</strong>: access: read and write</li>
  <li><strong>metadata</strong>: access: read-only</li>
</ul>

<p>Due to the necessary permissions (PAT and others mentioned above), it is recommended to use it as a secret rather than an environment variable.</p>

<h2 id="customizing-fonts-spacing-and-more">Customizing fonts, spacing, and more</h2>

<p>You can customize the fonts, spacing, and more by editing <a href="_sass/_base.scss">_sass/_base.scss</a>. The easiest way to try in advance the changes is by using <a href="https://developer.chrome.com/docs/devtools/css">chrome dev tools</a> or <a href="https://firefox-source-docs.mozilla.org/devtools-user/">firefox dev tools</a>. In there you can click in the element and find all the attributes that are set for that element and where are they. For more information on how to use this, check <a href="https://developer.chrome.com/docs/devtools/css">chrome</a> and <a href="https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/examine_and_edit_css/index.html">firefox</a> how-tos, and <a href="https://www.youtube.com/watch?v=l0sgiwJyEu4">this tutorial</a>.</p>

<h2 id="scheduled-posts">Scheduled Posts</h2>

<p><code class="language-plaintext highlighter-rouge">al-folio</code> contains a workflow which automatically publishes all posts scheduled at a specific day, at the end of the day (23:30). By default the action is disabled, and to enable it you need to go to <code class="language-plaintext highlighter-rouge">.github/workflows/</code> and find the file called <code class="language-plaintext highlighter-rouge">schedule-posts.txt</code>. This is the workflow file. For GitHub to recognize it as one (or to enable the action), you need to rename it to <code class="language-plaintext highlighter-rouge">schedule-posts.yml</code>.</p>

<p>In order to use this you need to save all of your “Completed” blog posts which are scheduled to be uploaded on a specific date, in a folder named <code class="language-plaintext highlighter-rouge">_scheduled/</code> in the root directory.</p>

<blockquote>
  <p>Incomplete posts should be saved in <code class="language-plaintext highlighter-rouge">_drafts/</code></p>
</blockquote>

<h3 id="name-format">Name Format</h3>

<p>In this folder you need to store your file in the same format as you would in <code class="language-plaintext highlighter-rouge">_posts/</code></p>

<blockquote>
  <p>Example file name: <code class="language-plaintext highlighter-rouge">2024-08-26-This file will be uploaded on 26 August.md</code></p>
</blockquote>

<h3 id="important-notes">Important Notes</h3>

<ul>
  <li>The scheduler uploads posts everyday at 🕛 23:30 UTC</li>
  <li>It will only upload posts at 23:30 UTC of their respective scheduled days, It’s not uploaded in 23:59 in case there are a lot of files as the scheduler must finish before 00:00</li>
  <li>It will only upload files which follow the pattern <code class="language-plaintext highlighter-rouge">yyyy-mm-dd-title.md</code>
    <ul>
      <li>This means that only markdown files will be posted</li>
      <li>It means that any markdown which do not follow this pattern will not be posted</li>
    </ul>
  </li>
  <li>The scheduler works by moving posts from the <code class="language-plaintext highlighter-rouge">_scheduled/</code> directory to <code class="language-plaintext highlighter-rouge">_posts/</code>, it will not post to folders like <code class="language-plaintext highlighter-rouge">_projects/</code> or <code class="language-plaintext highlighter-rouge">_news/</code></li>
  <li>The date in the name of the file is the day that file will be uploaded on
    <ul>
      <li><code class="language-plaintext highlighter-rouge">2024-08-27-file1.md</code> will not be posted before or after 27-August-2024 (Scheduler only works for posts scheduled on the present day)</li>
      <li><code class="language-plaintext highlighter-rouge">2025-08-27-file2.md</code> will be posted exactly on 27-August-2025</li>
      <li><code class="language-plaintext highlighter-rouge">File3.md</code> will not be posted at all</li>
      <li><code class="language-plaintext highlighter-rouge">2026-02-31-file4.md</code> is supposed to be posted on 31-February-2026, but there is no 31st in February hence this file will never be posted either</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="python" /><category term="pdm" /><category term="python" /><summary type="html"><![CDATA[PDM]]></summary></entry><entry><title type="html">PDM</title><link href="https://dominikocsofszki.github.io/blog/2024/PDM/" rel="alternate" type="text/html" title="PDM" /><published>2024-11-24T00:00:00+01:00</published><updated>2024-11-24T00:00:00+01:00</updated><id>https://dominikocsofszki.github.io/blog/2024/PDM</id><content type="html" xml:base="https://dominikocsofszki.github.io/blog/2024/PDM/"><![CDATA[<p>PDM:</p>
<ul>
  <li>how to use scripts</li>
</ul>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>    <span class="nn">[tool.pdm.scripts]</span>
    <span class="py">watch</span> <span class="p">=</span> <span class="s">"bundle exec jekyll build --watch"</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="python" /><category term="pdm" /><category term="python" /><summary type="html"><![CDATA[PDM]]></summary></entry><entry><title type="html">a post with code</title><link href="https://dominikocsofszki.github.io/blog/2015/code/" rel="alternate" type="text/html" title="a post with code" /><published>2015-07-15T17:09:00+02:00</published><updated>2015-07-15T17:09:00+02:00</updated><id>https://dominikocsofszki.github.io/blog/2015/code</id><content type="html" xml:base="https://dominikocsofszki.github.io/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting.
It supports more than 100 languages.
This example is in C++.
All you have to do is wrap your code in markdown code tags:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Which displays:</p>

<ol>
  <li>
    <p>We can put fenced code blocks inside nested bullets, too.</p>

    <ol>
      <li>
        <p>Like this:</p>

        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>The key is to indent your fenced block in the same line as the first character of the line.</p>
      </li>
    </ol>
  </li>
</ol>

<p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p>

<p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p>

<p>{% highlight c++ linenos %} <br /> code code code <br /> {% endhighlight %}</p>

<p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers.
Produces something like this:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="code" /><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>